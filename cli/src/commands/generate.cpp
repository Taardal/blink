#include "pch.h"
#include "commands.h"

namespace BlinkCLI {
    CLI::Command generate() {
        CLI::Option buildDirectory;
        buildDirectory.Name = "buildDirectory";
        buildDirectory.Usage = "Where to store project files generated by CMake";
        buildDirectory.DefaultValue = "build";
        buildDirectory.Aliases = {"o", "out"};

        CLI::Option cmakeSourceDirectoryOption;
        cmakeSourceDirectoryOption.Name = "cmakeDir";
        cmakeSourceDirectoryOption.Usage = "Where the CMake source files are located";
        cmakeSourceDirectoryOption.DefaultValue = ".";
        cmakeSourceDirectoryOption.Aliases = {"c"};

        CLI::Option cmakeGeneratorOption;
        cmakeGeneratorOption.Name = "generator";
        cmakeGeneratorOption.Usage = "Which generator to use for generating build files";
        cmakeGeneratorOption.DefaultValue = "Ninja";
        cmakeGeneratorOption.Aliases = {"g"};

        CLI::Option glfwOption;
        glfwOption.Name = "glfw";
        glfwOption.Usage = "Build GLFW as part of this project instead of using binaries installed on local machine";

        CLI::Option releaseOption;
        releaseOption.Name = "release";
        releaseOption.Usage = "Use Release mode";
        releaseOption.Aliases = {"r"};

        CLI::Command command;
        command.Name = "generate";
        command.Usage = "Generate project files using CMake";
        command.Aliases = {"gen"};
        command.Options = {
                buildDirectory,
                cmakeSourceDirectoryOption,
                cmakeGeneratorOption,
                glfwOption,
                releaseOption
        };
        command.Action = [](const CLI::Context& context) -> void {
            std::string_view buildType = context.hasOption("release") ? "Release" : "Debug";
            std::string_view buildDirectory = context.Command->getOptionValue("buildDirectory");
            std::string_view cmakeSourceDirectory = context.Command->getOptionValue("cmakeDir");
            std::string_view cmakeGenerator = context.Command->getOptionValue("generator");

            std::stringstream ss;
            ss << "cmake -D CMAKE_BUILD_TYPE=" << buildType;
            if (context.hasOption("glfw")) {
                ss << " -D BUILD_GLFW_SRC=ON";
            }
            ss << " -B " << buildDirectory;
            ss << " -S " << cmakeSourceDirectory;
            ss << " -G " << cmakeGenerator;
            ss << " -D CMAKE_EXPORT_COMPILE_COMMANDS=ON";

            std::string command = ss.str();
            printf("%s\n", command.c_str());
            std::system(command.c_str());
        };
        return command;
    }
}